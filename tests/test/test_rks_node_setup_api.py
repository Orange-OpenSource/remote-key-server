# Software Name : Remote Key Server
# Version: 0.9.0
# SPDX-FileCopyrightText: Copyright (c) 2020 Orange
# SPDX-License-Identifier: MPL-2.0
#
# This software is distributed under the Mozilla Public License 2.0,
# the text of which is available at https://www.mozilla.org/en-US/MPL/2.0/
# or see the "LICENSE" file for more details.
#
# Author: Glenn Feunteun, Celine Nicolas
# coding: utf-8

"""
    Remote Key Server API

    Describes RKS API  # noqa: E501

    OpenAPI spec version: 0.4.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import pytest
import time
import requests

import rks
from rks.api.rks_node_setup_api import RKSNodeSetupApi  # noqa: E501
from rks.rest import ApiException, ApiValueError


class TestRKSNodeSetupApi(object):
    """RKSNodeSetupApi unit test stubs"""

    def test_register_node_allowed(self, node_setup_api, group_token):
        """Test case for register_node
        Node is provisionned on mock client as allowed node
        Register a Group Node  # noqa: E501
        """
        node_id = "1"

        node_setup_api.api_client.configuration.api_key[
            "X-Vault-Token"
        ] = group_token.group_token

        nodeToken, responseStatus, headers = node_setup_api.register_node_with_http_info(
            node_id, _return_http_data_only=False
        )
        print(nodeToken)
        assert type(nodeToken) == rks.models.NodeToken and nodeToken != "None"
        assert responseStatus == 201

    def test_register_node_invalid_nodeid(self, node_setup_api, group_token):
        r = requests.put(
            "https://mock-callback-server:8081/callback/nodes/fake*$=",
            headers={"Authorization": "Bearer tokentest"},
            verify=False,
        )

        node_setup_api.api_client.configuration.api_key[
            "X-Vault-Token"
        ] = group_token.group_token

        with pytest.raises(ApiValueError) as excinfo:
            nodeToken, responseStatus, headers = node_setup_api.register_node_with_http_info(
                "fake*$=", _return_http_data_only=False
            )
        # assert excinfo.value.status == 404

    def test_register_node_allowed_without_callbackurl(
        self, node_setup_api, group_token_nocallbackurl
    ):
        """Test case for register_node
        Register a Group Node whose group has been registred without callbackurl # noqa: E501
        """
        node_id = "1"

        node_setup_api.api_client.configuration.api_key[
            "X-Vault-Token"
        ] = group_token_nocallbackurl.group_token

        nodeToken, responseStatus, headers = node_setup_api.register_node_with_http_info(
            node_id, _return_http_data_only=False
        )
        assert type(nodeToken) == rks.models.NodeToken and nodeToken != "None"
        assert responseStatus == 201

    def test_register_node_notAllowed(self, node_setup_api, group_token):
        """Test case for register_node
        Node is not provisionned on mock client
        Register a Group Node  # noqa: E501
        """
        node_id = "0"

        node_setup_api.api_client.configuration.api_key[
            "X-Vault-Token"
        ] = group_token.group_token

        try:
            nodeToken, responseStatus, headers = node_setup_api.register_node_with_http_info(
                node_id, _return_http_data_only=False
            )
        except ApiException as e:
            assert e.status == 403

    def test_register_node_wrong_auth_credentials(
        self, node_setup_api, group_token_wrong_oauth_credentials
    ):
        """Test case for register_node
        Node is  provisionned on mock client,
        grouptoken has been created with wrong oauth credentials
        Register a Group Node  # noqa: E501
        """
        node_id = "0"

        node_setup_api.api_client.configuration.api_key[
            "X-Vault-Token"
        ] = group_token_wrong_oauth_credentials.group_token

        try:
            nodeToken, responseStatus, headers = node_setup_api.register_node_with_http_info(
                node_id, _return_http_data_only=False
            )
        except ApiException as e:
            assert e.status == 500

    def test_register_node_wrong_token(self, node_setup_api, admin_api):
        """Test case for register_node
        Test call register node with an admin(root) token
        Test call register node with a fake token
        TODO: Add Test call register node with a wrong header name for node_token

        Register a Group Node  # noqa: E501
        """
        node_id = "0"

        node_setup_api.api_client.configuration.api_key[
            "X-Vault-Token"
        ] = admin_api.api_client.configuration.api_key["X-Vault-Token"]

        try:
            nodeToken, responseStatus, headers = node_setup_api.register_node_with_http_info(
                node_id, _return_http_data_only=False
            )
        except ApiException as e:
            assert e.status == 403

        node_setup_api.api_client.configuration.api_key["X-Vault-Token"] = "faketoken"

        try:
            nodeToken, responseStatus, headers = node_setup_api.register_node_with_http_info(
                node_id, _return_http_data_only=False
            )
        except ApiException as e:
            assert e.status == 403

    def test_renew_group_token(self, node_setup_api, group_token, vault_address):
        """
        Token renewal increases token TTL
        """
        time.sleep(2)  # Wait a bit to reduce token TTL

        ttl_before_renewal = requests.get(
            vault_address + "/v1/auth/token/lookup-self",
            headers={"X-Vault-Token": group_token.group_token},
        ).json()["data"]["ttl"]

        node_setup_api.api_client.configuration.api_key[
            "X-Vault-Token"
        ] = group_token.group_token

        node_setup_api.renew_token()

        ttl_after_renewal = requests.get(
            vault_address + "/v1/auth/token/lookup-self",
            headers={"X-Vault-Token": group_token.group_token},
        ).json()["data"]["ttl"]

        assert ttl_after_renewal > ttl_before_renewal

    def test_renew_node_token(self, node_setup_api, group_token):
        """Test case for renew_token
        """
        node_id = "1"

        node_setup_api.api_client.configuration.api_key[
            "X-Vault-Token"
        ] = group_token.group_token

        node_token, responseStatus, headers = node_setup_api.register_node_with_http_info(
            node_id, _return_http_data_only=False
        )
        print(node_token)

        time.sleep(2)  # Wait a bit to reduce token TTL

        ttl_before_renewal = requests.get(
            "http://rks-vault:8200/v1/auth/token/lookup-self",
            headers={"X-Vault-Token": node_token.node_token},
        ).json()["data"]["ttl"]

        node_setup_api.api_client.configuration.api_key[
            "X-Vault-Token"
        ] = node_token.node_token

        _, responseStatus, headers = node_setup_api.renew_token_with_http_info(
            _return_http_data_only=False
        )

        print("Renew response status: ", responseStatus)

        ttl_after_renewal = requests.get(
            "http://rks-vault:8200/v1/auth/token/lookup-self",
            headers={"X-Vault-Token": node_token.node_token},
        ).json()["data"]["ttl"]

        assert ttl_after_renewal > ttl_before_renewal

    def test_failed_renew_node_token(self, node_setup_api, group_token):
        node_id = "1"

        node_setup_api.api_client.configuration.api_key[
            "X-Vault-Token"
        ] = group_token.group_token

        node_token, responseStatus, headers = node_setup_api.register_node_with_http_info(
            node_id, _return_http_data_only=False
        )

        node_setup_api.api_client.configuration.api_key[
            "X-Vault-Token"
        ] = "erroneous token"

        with pytest.raises(rks.exceptions.ApiException) as exception_info:
            data, responseStatus, headers = node_setup_api.renew_token_with_http_info(
                _return_http_data_only=False
            )
        assert exception_info.value.status == 403
        assert exception_info.value.body == '{"errors":["permission denied"]}\n'


if __name__ == "__main__":
    test.main()
